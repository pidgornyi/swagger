#1
order/Physician => Physician
setup/Physician => PhysicianSetup

TestDefinition => TestDefinitionSetup, TestDefinitionCatalog

catalog.model.SpecimenSetup => CatalogSpecimenSetup
requisiotion.Specimen => RequisitionSpecimen

#2
Dictionary(String id, String name) => constructor removed
	
#3
IndicationType enum
getByValue() => fromValue()

TestType, MicType, MediaGenerationType
getValue() => toString()
getByValue() => fromValue()

UserDefinedFieldOwnerType, UserDefinedFieldLevel, UserDefinedFieldType
value() => toString()

UserDefinedFieldType
in() => removed

#4
countItems
Short => Integer

#5
MedicalNecessityItem
public Diagnosis[] testLevelDiagnoses = new Diagnosis[4]; => List<Diagnosis> , - null (initialization removed)

#6
 @OptionInfo
 
#7
OrderingKeypad<TSetup>
#List<OrderingKeypad<TestDefinition>>

#8
Case
Set<String> parentOrderNumbers;

Test
    public Collection<Physician> reportToDoctors;
    public Collection<Physician> orderingDoctors;

ProcessPatientResult
public Collection<Message> messages;

OperationResult release(@RequestBody Case[] requisitionList);
ProcessResult mergeRequisitions(@RequestBody RequisitionPart[] requisitionsParts);

TestDefinitionCatalog
   private Collection<TestSetupIdentifier> components;
   private Collection<TestSetupIdentifier> partOfPanels;
   private Collection<TestSetupIdentifier> sameOeCategoryTests;
   private Collection<TestResultFieldSetup> resultFields;
TestDefinitionCatalog
   private Collection<TestSpecialCasesSetup> specialCases;

#9
TestStatus - enum with name-value-description

#10
/order
ResponseEntity<ProcessResult> openOrder(
PatientService
   ResponseEntity<PatientInfo> getPatientInfo
  ResponseEntity<Case> initiateRequisition

#11
VisitsBatch(List<Visit> visits, boolean hasMoreItems){ - model constructor removed

#12
Fix enum to string
readTestLevelUserDefinedField

#13
MrnValidator => MrnValidatorService
BillingValidator => BillingValidatorService

#14
Fix RestSpringFactory

#15
Check for model duplications in deff folders

#16
ResultRangeSetup
private Map<RangeLinkType, List<String>> links; => Map<String, ...> 


